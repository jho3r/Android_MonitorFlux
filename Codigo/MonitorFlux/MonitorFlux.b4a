Build1=Default,com.monitorflux
File1=Agregar.bal
File10=Monitoreo.bal
File11=Principal.bal
File12=Registrar.bal
File13=Tutorial.bal
File2=Artboard 1.png
File3=Artboard 1mdpi.png
File4=Datos.bal
File5=Graficas.bal
File6=Iniciar.bal
File7=Intro.bal
File8=Item.bal
File9=monitor.db
FileGroup1=Default Group
FileGroup10=Default Group
FileGroup11=Default Group
FileGroup12=Default Group
FileGroup13=Default Group
FileGroup2=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
FileGroup5=Default Group
FileGroup6=Default Group
FileGroup7=Default Group
FileGroup8=Default Group
FileGroup9=Default Group
Group=Default Group
Library1=core
Library10=runtimepermissions
Library11=sql
Library12=dbutils
Library13=androidplot_0_6_2
Library2=xui
Library3=xcustomlistview
Library4=ime
Library5=okhttputils2
Library6=json
Library7=phone
Library8=javaobject
Library9=keyvaluestore
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: https://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="14" android:targetSdkVersion="29"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~CreateResourceFromFile(Macro, Themes.LightTheme)~\n~'End of default text.~\n~
Module1=Agregar_Activity
Module2=Datos_Activity
Module3=Grafica_Activity
Module4=Monitor_Activity
Module5=Registrar_Activity
Module6=Starter
Module7=Tutoriales_Activity
NumberOfFiles=13
NumberOfLibraries=13
NumberOfModules=7
Version=10.2
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: MonitorFlux
	#VersionCode: 1
	#VersionName: 
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: portrait
	#CanInstallToExternalStorage: False
	#BridgeLogger: True
#End Region

#Region  Activity Attributes 
	#FullScreen: False
	#IncludeTitle: False
#End Region

Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'These variables can be accessed from all modules.
	Private xui As XUI
	Dim tmrIntro As Timer 'Timer para el intro de la aplicacion ahora se debe inicializar
	Dim list As List
	Dim inicio As Boolean
	Dim ID As String
	Dim urlHistorial As String
End Sub

Sub Globals
	'These global variables will be redeclared each time the activity is created.
	Private lbFallas As Label
	Private lbBombas As Label
	Dim urlGet As String
	Dim backendelessGet As HttpJob 'se debe inicializar
	Dim backendmensaje As HttpJob
	Dim i As Int
	Dim disFallando As Int
	Dim historial As HttpJob
	Private IniciarSesion As HttpJob
	Private urlIniciar As String
	Dim rp As RuntimePermissions
End Sub

Sub Activity_Create(FirstTime As Boolean)
	If FirstTime=True Then
		Activity.LoadLayout("Intro")			'cargamos el layout del intro
		tmrIntro.Initialize("tmrIntro",3000)	'inicializamos el timer y ahora lo habilitamos
		tmrIntro.Enabled = True					'Se ejecuta en tmrIntro_Tick
		inicio = False
	Else
		Activity.RemoveAllViews
		Activity.LoadLayout("Principal")
	End If
	
	SetStatusBarColor(Colors.RGB(231,231,222))
	urlHistorial = "https://api.backendless.com/4D75900B-E59C-1318-FF7D-6D0FBCB48400/A5201E9F-9465-4336-B56B-C606DDD986ED/data/Historial?pageSize=100&property=fecha&property=id&property=encendida&where=id%3D'000000'"
	urlGet = "https://api.backendless.com/4D75900B-E59C-1318-FF7D-6D0FBCB48400/A5201E9F-9465-4336-B56B-C606DDD986ED/data/Dispositivos?where=ownerId%20%3D%20"
	backendelessGet.Initialize("get",Me)
	list.Initialize
	IniciarSesion.Initialize("iniciar",Me)
	urlIniciar = "https://api.backendless.com/4D75900B-E59C-1318-FF7D-6D0FBCB48400/A5201E9F-9465-4336-B56B-C606DDD986ED/users/login"
End Sub

Sub Activity_Resume
	rp.CheckAndRequest(rp.PERMISSION_READ_SMS)
	Wait For Activity_PermissionResult(Permission As String, Result As Boolean) 'esperamos por repuesta de usuario
	If Result Then
		ToastMessageShow("Permiso para leer mensajes en uso",True)
	End If
	If tmrIntro.Enabled = False Then
		Log("Timer deshabilitado, intentando inicio")
		intentoInicio
		'backendelessGet.Download(urlGet)
	End If
	
End Sub

Sub Activity_Pause (UserClosed As Boolean)
	Log("Main en pausa")
End Sub

Sub tmrIntro_Tick
	tmrIntro.Enabled = False
	Log("Finalizando intro inicial intentando inicio")
	If Starter.checkMantener Then
		Dim datos As String
		datos = "{"&Chr(34)&"login"&Chr(34)&":"&Chr(34)&Starter.usuario&Chr(34)&","&Chr(34)&"password"&Chr(34)&":"&Chr(34)&Starter.clave&Chr(34)&"}"
		IniciarSesion.PostString(urlIniciar, datos)
		IniciarSesion.GetRequest.SetContentType("application/json")
	Else
		intentoInicio
	End If
	
End Sub

Sub btnMonitoreo_Click
	StartActivity(Monitor_Activity)
End Sub

Sub btnAgregar_Click
	StartActivity(Agregar_Activity)
End Sub

Sub btnTutorial_Click
	StartActivity(Tutoriales_Activity)
End Sub

Sub SetStatusBarColor(clr As Int)
	Dim p As Phone
	If p.SdkVersion >= 21 Then
		Dim jo As JavaObject
		jo.InitializeContext
		Dim window As JavaObject = jo.RunMethodJO("getWindow", Null)
		window.RunMethod("addFlags", Array (0x80000000))
		window.RunMethod("clearFlags", Array (0x04000000))
		window.RunMethod("setStatusBarColor", Array(clr))
	End If
	If p.SdkVersion >= 23 Then
		jo = Activity
		jo.RunMethod("setSystemUiVisibility", Array(8192)) 'SYSTEM_UI_FLAG_LIGHT_STATUS_BAR
	End If
End Sub

Sub JobDone (Job As HttpJob)
	Log("JobName = " & Job.JobName & ", Success = " & Job.Success)
	If Job.Success = True Then
		Select Job.JobName 'Nombre del proceso a traves del cual se realizo la peticion
			Case "get"
				conteo(Job.GetString) 'se envia la cadena recibida para procesar
			Case "historial"
				Log(Job.GetString)
				fallando(Job.GetString)
			Case "iniciar"
				resInicio(Job.GetString) 'se envia la cadena recibida para procesar
			Case "mensaje"
				Log(Job.GetString)
				mostrarMensaje(Job.GetString)
		End Select
	Else
		Log("Error: " & Job.ErrorMessage)
		ToastMessageShow("Error: " & Job.ErrorMessage, True)
	End If
	Job.Release
End Sub

Sub conteo(res As String)
	i=0
	Dim historialmas As String = ""
	list.Clear
	Dim parser As JSONParser 						'definimos objeto que permite procesar JSON
	parser.Initialize(res)
	Dim root As List = parser.NextArray
	For Each colroot As Map In root				'map es similar a list solo que se hace con clave, dato y se añade con put
		Dim nombre As String = colroot.Get("id")
		list.Add(nombre)
		i = i + 1
		historialmas = historialmas & "%20or%20id%3D'"&nombre&"'"
	Next
	lbBombas.Text = i & " Dispositivos"
	historial.Initialize("historial",Me)
	urlHistorial = urlHistorial & historialmas
	historial.Download(urlHistorial)
End Sub

Sub fallando(res As String)
	disFallando = 0
	Dim fecha As Long = 0
	Dim parser As JSONParser 						'definimos objeto que permite procesar JSON
	For a=0 To list.Size -1
		parser.Initialize(res)
		Dim root As List = parser.NextArray
		For Each colroot As Map In root				'map es similar a list solo que se hace con clave, dato y se añade con put
			' solo me interesan los datos que esten relacionados con la electrobomba actual
			If colroot.Get("id") = list.Get(a) Then
				'Log(list.Get(a))
				'guardo el valor de fecha para comparar y obtener la mas reciente
				Dim fechaEntra As Long = colroot.Get("fecha")
				If fechaEntra >= fecha Then
					Dim estado As Boolean = colroot.Get("encendida")
					fecha = fechaEntra
				End If
			End If
		Next
		If estado = False Then
			disFallando = disFallando + 1
			Log(disFallando)
		End If
		fecha = 0
	Next
	'Asignaicon de texto y cambio de color si hay una electrobomba fallando
	lbFallas.Text = disFallando & " Fallando"
	If disFallando > 0 Then
		lbFallas.Color = Colors.ARGB(255,240,84,84)
	Else
		lbFallas.Color = Colors.ARGB(128,0,136,145)
	End If
	leerMensajes
End Sub

Sub intentoInicio
	'If inicio de sesion no exitoso
	If inicio == False Then
		StartActivity(Registrar_Activity)
	Else
		'If inicio es exitoso
		Activity.RemoveAllViews
		Activity.LoadLayout("Principal")		'cargamos la pantalla principal y deshabilitamos el timer
		backendelessGet.Download(urlGet & "'" & ID & "'")   'Cuando complete el proceso ejecutara jobDone
	End If
	
	
End Sub

Sub btnOut_Click
	Starter.actualizarCampos("mantener","0","id","1")
	Starter.actualizarCampos("usuario","elpepe","id","1")
	Starter.actualizarCampos("clave","elteset","id","1")
	inicio = False
	intentoInicio
End Sub

Sub resInicio(res As String)
	inicio = True
	Dim parser As JSONParser 						'definimos objeto que permite procesar JSON
	parser.Initialize(res)
	Dim root As Map = parser.NextObject
	ID = root.Get("objectId")
	intentoInicio
End Sub

Sub leerMensajes
	Dim SmsMessages1 As SmsMessages
	Dim List1 As List
	List1 = SmsMessages1.GetAllSince(DateTime.Add(DateTime.Now, 0, 0, -1))
	For i = 0 To List1.Size - 1
		Dim Sms As Sms
		Sms = List1.Get(i)
		Log(Sms)
		If Sms.Body.Contains("ElectrobombaFallando") Then
			For j=0 To list.Size - 1
				If Sms.Body.Contains(list.Get(j)) Then
					backendmensaje.Initialize("mensaje",Me)
					backendmensaje.Download("https://api.backendless.com/4D75900B-E59C-1318-FF7D-6D0FBCB48400/A5201E9F-9465-4336-B56B-C606DDD986ED/data/Dispositivos?where=id%3D'"&list.Get(j)&"'&property=nombre")
				End If
			Next
		End If
	Next
End Sub

Sub mostrarMensaje(res As String)
	Dim parser As JSONParser 						'definimos objeto que permite procesar JSON
	parser.Initialize(res)
	Dim root As List = parser.NextArray
	For Each colroot As Map In root				'map es similar a list solo que se hace con clave, dato y se añade con put
		Dim nombre As String = colroot.Get("nombre")
	Next
	MsgboxAsync("El dispositivo: " & nombre & " envio un mensaje de alerta, por favor actualice su estado","Alerta!")
End Sub